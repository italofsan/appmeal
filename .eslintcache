[{"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\routes.tsx":"1","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\CardCategory\\index.tsx":"2","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\Details\\index.tsx":"3","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\Header\\index.tsx":"4","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\Login\\index.tsx":"5","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\Home\\index.tsx":"6","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\MealsList\\index.tsx":"7","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\CardMeal\\index.tsx":"8","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\App.tsx":"9","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\services\\api.ts":"10","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\ListPages\\index.tsx":"11"},{"size":657,"mtime":1606439047429,"results":"12","hashOfConfig":"13"},{"size":2490,"mtime":1606478382705,"results":"14","hashOfConfig":"13"},{"size":4974,"mtime":1606500102056,"results":"15","hashOfConfig":"13"},{"size":1704,"mtime":1606488106782,"results":"16","hashOfConfig":"13"},{"size":3203,"mtime":1606499679379,"results":"17","hashOfConfig":"13"},{"size":4032,"mtime":1606495298773,"results":"18","hashOfConfig":"13"},{"size":4246,"mtime":1606500016885,"results":"19","hashOfConfig":"13"},{"size":2516,"mtime":1606479259044,"results":"20","hashOfConfig":"13"},{"size":518,"mtime":1606477884333,"results":"21","hashOfConfig":"13"},{"size":136,"mtime":1606182203413,"results":"22","hashOfConfig":"13"},{"size":1297,"mtime":1606489565990,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i2lo6p",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\routes.tsx",[],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\CardCategory\\index.tsx",[],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\Details\\index.tsx",["49","50"],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\Header\\index.tsx",[],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\Login\\index.tsx",[],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\Home\\index.tsx",["51"],"import React, { useState, useEffect } from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Header from '../../components/Header';\r\nimport CardCategory from '../../components/CardCategory';\r\n\r\nimport loadingImage from '../../assets/loading.gif';\r\nimport api from '../../services/api';\r\n\r\ninterface ICategory {\r\n  idCategory: string;\r\n  strCategory: string;\r\n  strCategoryDescription: string;\r\n  strCategoryThumb: string;\r\n}\r\n\r\nconst Home: React.FC = () => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [categories, setCategories] = useState<ICategory[]>([]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const fetchCategories = async () => {\r\n    try {\r\n      await api.get('/categories.php').then((response) => {\r\n        const { data } = response;\r\n        setCategories(data.categories);\r\n        setLoading(false);\r\n      });\r\n    } catch (error) {\r\n      setLoading(false);\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Grid\r\n          item\r\n          xl={12}\r\n          xs={12}\r\n          style={{ display: 'flex', justifyContent: 'center' }}\r\n        >\r\n          <div className={classes.welcomeTitle}>\r\n            <Typography className={classes.welcomeTitleText}>\r\n              Welcome!\r\n            </Typography>\r\n            <Typography className={classes.welcomeSubtitleText}>\r\n              Choose your recipes by category\r\n            </Typography>\r\n          </div>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xl={12}\r\n          xs={12}\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <img src={loadingImage} />\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.container}>\r\n        <Header />\r\n        <Grid\r\n          item\r\n          xl={12}\r\n          xs={12}\r\n          style={{ display: 'flex', justifyContent: 'center' }}\r\n        >\r\n          <div className={classes.welcomeTitle}>\r\n            <Typography className={classes.welcomeTitleText}>\r\n              Welcome!\r\n            </Typography>\r\n            <Typography className={classes.welcomeSubtitleText}>\r\n              Choose your recipes by category\r\n            </Typography>\r\n          </div>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xl={12}\r\n          xs={12}\r\n          style={{\r\n            width: '100%',\r\n            flexWrap: 'wrap',\r\n            display: 'flex',\r\n          }}\r\n        >\r\n          {categories.map((category: ICategory) => (\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              lg={6}\r\n              md={6}\r\n              xl={6}\r\n              className={classes.card}\r\n              key={category.idCategory}\r\n            >\r\n              <CardCategory\r\n                key={category.idCategory}\r\n                id={category.idCategory}\r\n                name={category.strCategory}\r\n                description={category.strCategoryDescription}\r\n                thumb={category.strCategoryThumb}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: '#FFCF99',\r\n  },\r\n  container: {\r\n    height: '100%',\r\n  },\r\n  welcomeTitle: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  welcomeTitleText: {\r\n    flexGrow: 1,\r\n    fontSize: 48,\r\n    textAlign: 'center',\r\n  },\r\n  welcomeSubtitleText: {\r\n    flexGrow: 1,\r\n    fontSize: 24,\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center',\r\n    padding: 10,\r\n  },\r\n});\r\n","D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\pages\\MealsList\\index.tsx",["52","53","54","55"],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\CardMeal\\index.tsx",[],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\App.tsx",[],["56","57"],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\services\\api.ts",[],"D:\\Italo\\.Dev\\Tests\\One Sight\\myappmeal\\src\\components\\ListPages\\index.tsx",["58"],"import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\ninterface IProps {\r\n  mealsPerPage: number;\r\n  totalMeals: number;\r\n  paginate: {\r\n    (pageNumber: number): void;\r\n  };\r\n}\r\n\r\nconst ListPages: React.FC<IProps> = ({\r\n  mealsPerPage,\r\n  totalMeals,\r\n  paginate,\r\n}) => {\r\n  const classes = useStyles();\r\n  const pageNumbers = [];\r\n  const [page, setPage] = React.useState(1);\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    paginate(value);\r\n    setPage(value);\r\n  };\r\n\r\n  for (let i = 1; i <= Math.ceil(totalMeals / mealsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <Grid item xl={12} xs={12} className={classes.paginationContainer}>\r\n      <Pagination\r\n        count={Math.ceil(totalMeals / mealsPerPage)}\r\n        color='secondary'\r\n        page={page}\r\n        onChange={handleChange}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ListPages;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paginationContainer: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      padding: 10,\r\n    },\r\n  })\r\n);\r\n",{"ruleId":"59","severity":1,"message":"60","line":33,"column":6,"nodeType":"61","endLine":33,"endColumn":8,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":70,"column":11,"nodeType":"65","endLine":70,"endColumn":57},{"ruleId":"66","severity":1,"message":"67","line":70,"column":11,"nodeType":"65","endLine":70,"endColumn":37},{"ruleId":"68","severity":1,"message":"69","line":2,"column":28,"nodeType":"70","messageId":"71","endLine":2,"endColumn":44},{"ruleId":"68","severity":1,"message":"72","line":29,"column":24,"nodeType":"70","messageId":"71","endLine":29,"endColumn":39},{"ruleId":"59","severity":1,"message":"73","line":34,"column":6,"nodeType":"61","endLine":34,"endColumn":8,"suggestions":"74"},{"ruleId":"63","severity":1,"message":"64","line":69,"column":11,"nodeType":"65","endLine":69,"endColumn":57},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"68","severity":1,"message":"79","line":2,"column":16,"nodeType":"70","messageId":"71","endLine":2,"endColumn":26},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMeal'. Either include it or remove the dependency array.","ArrayExpression",["80"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","@typescript-eslint/no-unused-vars","'BottomNavigation' is defined but never used.","Identifier","unusedVar","'setMealsPerPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchMeals'. Either include it or remove the dependency array.",["81"],"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"'Typography' is defined but never used.",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [fetchMeal]",{"range":"88","text":"89"},"Update the dependencies array to be: [fetchMeals]",{"range":"90","text":"91"},[881,883],"[fetchMeal]",[1066,1068],"[fetchMeals]"]